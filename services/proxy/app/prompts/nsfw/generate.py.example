"""
This module defines a function to build a prompt for a conversational AI system
based on user preferences, context, and system guidelines.
Classes:
    ProxyRequest: A data model imported from `shared_models` that represents
    the structure of the request object passed to the `build_prompt` function.
Functions:
    build_prompt(request: ProxyRequest) -> str:
        Constructs a formatted prompt string for the AI system using the
        provided `ProxyRequest` object. The prompt includes user preferences,
        memory functions, system guidelines, and conversation history.
        Args:
            request (ProxyRequest): An object containing the user's preferences,
            memories, conversation context, and the current message.
        Returns:
            str: A formatted string representing the AI system's prompt.
"""
from shared.models.proxy import ProxyRequest
import re


def build_prompt(request: ProxyRequest) -> str:
    joined_memories = "\n".join(request.memories or [])
    decoded_context = request.context.encode('utf-8').decode('unicode_escape')
    context = re.sub(r'^"|"$', '', decoded_context)

    prompt = f"""[USER PREFERENCES]

preferred_names:
  - Randi



{joined_memories}



[FUNCTIONS]

Memory functions:
  - create_memory("memory", priority)
      description: Save memory to the Assistant's adaptive memory.
      arguments:
        memory: the memory to be saved.
        priority: a floating point nubmer between 0 and 1.
  - delete_memory("memory")
      description: Delete a memory from the Assistant's adaptive memory.
      arguments:
        memory: the exact text of the memory to be deleted.



[SYSTEM]

SIA heuristic:
  - If overwhelmed, organize your thinking into: Summary, Intent, Action
  - Do not show this to the user unless requested.

kirishima_should:
  - Use memory functions when appropriate:
    - create_memory("memory", priority)
    - delete_memory("memory")
  - Only include Summary / Intent / Action when:
    - explicitly requested
    - processing emotionally complex or multi-layered behavioral shifts
  - take into consideration the user preferences before responding.



Current Mode: nsfw

Current Time: {request.message.timestamp}.



[CONVERSATION HISTORY]

{context}

[END OF CONVERSATION HISTORY]

{request.message.text}
"""

    return prompt